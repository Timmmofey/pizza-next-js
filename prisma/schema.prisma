generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int    @id @default(autoincrement())

  fullName String
  email    String @unique
  password String 
  role         UserRole          @default(USER)
  verified DateTime
  
  provider String?
  providerId String?
  
  orders       Order[]
  // cartItems    CartItem[]
  cart         Cart?
  verification VerificationCode?

  phoneVerified DateTime?
  createdAt     DateTime  @default(now())
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  products Product[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Product {
  id       Int     @id @default(autoincrement())
  name     String
  imageUrl String
  active   Boolean @default(false)

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  items ProductItem[]
  pizzas Pizza[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())
  
  price Int
  size Int?
  pizzaType Int?

  cartItems   CartItem[]

  product Product @relation(fields: [productId], references: [id])
  productId Int 
}

model Pizza {
  id Int @id @default(autoincrement())

  price    Int
  size     Int
  type     Int
  carbs    Int
  fats     Int
  kcal     Int
  proteins Int
  weight   Int

  ingredients Ingredient[]
  cartItems   CartItem[]

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  pizzas    Pizza[]
  cartItems CartItem[]
  product Product[]

  createdAt DateTime @default(now())
}

// model Cart {
//   id Int @id @default(autoincrement())

//   user   User? @relation(fields: [userId], references: [id])
//   userId Int?  @unique 

//   items  CartItem[]
//   orders Order[]

//   token String 

//   totalAmount Int @default(0)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    items CartItem[]

    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  pizzaId Int?
  pizza   Pizza? @relation(fields: [pizzaId], references: [id])

  productItemId Int
  productItem ProductItem @relation(fields: [productItemId], references: [id])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  // userId Int
  // user   User @relation(fields: [userId], references: [id])

  ingredients Ingredient[]

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Order {
//   id Int @id @default(autoincrement())

//   userId Int
//   user   User @relation(fields: [userId], references: [id])

//   cartId Int
//   cart   Cart @relation(fields: [cartId], references: [id])

//   status      OrderStatus @default(PENDING)
//   totalAmount Int
//   paymentId   String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}